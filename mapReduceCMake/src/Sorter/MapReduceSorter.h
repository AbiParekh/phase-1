#pragma once
#include <vector>
#include <string>
#include <map>
#include "FileIO.h"

class MapSorter
{
public:
		//Constructor
		MapSorter(std::string postMapKey, std::string postSortKey);


		//Destructor
		
		/// <summary>
		/// Write Sorted Contents to File in the Format: ("<WORD>", 
		/// </summary>
		/// <param name="filePath"> Existing Path to send Output </param>
		/// <param name="fileName"> Non-Existing File Name that will be generated by this Function</param>
		/// <returns>
		/// True if Successfully Created Output File
		/// </returns>
		bool writeSortedMaptoFile(std::string filePath, std::string fileName);

		/// <summary>
		/// S-OConnor TODO Fill Out Comments
		/// </summary>
		/// <param name="folderPath"></param>
		/// <param name="fileName"></param>
		/// <returns></returns>
		bool addFileContentsToSorter(const std::string& folderPath, const std::string& fileName);

		bool ParseLineIntoSortedMap(const std::string& line);

		void MapSorter::AddPhraseToMap(const std::string& formattedWord, const std::string& startString, const std::string& endString);

private:

		/// <summary>
		/// S-OConnor TODO Fill Out Comments
		/// </summary>
		/// <param name="word"></param>
		/// <param name="usageCount"></param>
		/// <returns></returns>
		std::string formatOutput(const std::string& word, const uint32_t& usageCount);


		bool AnotherWordRemaining(const std::string& phrase, const std::string& subString);

		bool MapSorter::IsolateWord(const std::string& formattedWord, const std::string& startString, const std::string& endString, std::string& isloatedWord);


		/// <summary>
		/// Collection of Data for Usage. The Key is a String while the Value is the usage count 
		/// </summary>
		std::map<std::string, uint32_t> sortedMap;

		/// <summary>
		/// FileIOManagement Class for accessing Methods for writing to Functions 
		/// </summary>
		FileIOManagement fileManager;

		const std::string LEADING_STRING_MAPPED_FILES;

		const std::string LEADING_STRING_SORTED_FILES;

};